from htmlRequests import HtmlRequests
import yaml
import json


class Pentester:
    def __init__(self, config):
        self.endpoints = []
        self.load_config(config)
        self.handle_api()
        self.htmlRequests = HtmlRequests(
            self.servers[self.url_index], self.stopOnFailure
        )

    def handle_api(self):
        self.extract_base_url()
        self.extract_headers()

    def extract_base_url(self):
        with open(self.api_spec_path, "r") as f:
            api_spec = yaml.safe_load(f)
            self.servers = api_spec.get("servers", [])

    def load_config(self, filepath):
        with open(filepath, "r") as f:
            config_file = json.load(f)
            self.stopOnFailure = config_file["stop_on_failure"]
            self.api_spec_path = config_file["api_spec_path"]
            self.url_index = config_file["url_index"]

    def resolve_reference(self, ref):
        # Resolves $ref references in the OpenAPI spec
        ref_path = ref.lstrip("#/").split("/")
        resolved = self.api_spec
        for key in ref_path:
            resolved = resolved[key]
        return resolved

    def extract_headers(self):
        with open(self.api_spec_path, "r") as f:
            api_spec = yaml.safe_load(f)
            paths = api_spec.get("paths", {})
            for path, operations in paths.items():
                # Check for global parameters at the path level
                global_parameters = paths[path].get("parameters", [])

                for method, details in operations.items():
                    if method.lower() not in ["get", "post", "put", "delete", "patch"]:
                        continue  # Skip non-HTTP methods

                    # Merge global and operation-level parameters
                    parameters = global_parameters + details.get("parameters", [])

                    # Resolve $ref parameters
                    resolved_parameters = []
                    for param in parameters:
                        if "$ref" in param:
                            resolved_parameters.append(
                                self.resolve_reference(param["$ref"])
                            )
                        else:
                            resolved_parameters.append(param)

                    # Extract headers from responses
                    responses = details.get("responses", {})
                    headers = []
                    for response in responses.values():
                        if "headers" in response:
                            headers.extend(response["headers"].keys())

                    self.endpoints.append(
                        {
                            "path": path,
                            "method": method.upper(),
                            "parameters": resolved_parameters,
                            "headers": headers,
                        }
                    )

    def run(self):
        outputs = []
        for request in self.endpoints:
            outputs.append(self.htmlRequests.run(request))

        return outputs
