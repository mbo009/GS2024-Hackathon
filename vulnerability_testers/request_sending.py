import requests
import tempfile


def create_request_data(
    endpoint_data, server_url, is_endpoint_secured, auth_token=None
):
    endpoint_path = server_url + endpoint_data["path"]
    method = endpoint_data["method"].lower()
    parameters = endpoint_data.get("parameters", [])
    request_body = endpoint_data.get("requestBody", {})

    query_params = {}
    path_variables = {}
    payload = None
    files = None
    temp_files = []
    headers = {}

    if auth_token and is_endpoint_secured:
        headers["Authorization"] = f"Bearer {auth_token}"

    for param in parameters:
        if param["in"] == "query":
            query_params[param["name"]] = "test"
        elif param["in"] == "path":
            path_variables[param["name"]] = "test"

    for key, value in path_variables.items():
        endpoint_path = endpoint_path.replace(f"{{{key}}}", value)

    if "multipart/form-data" in request_body:
        properties = request_body["multipart/form-data"]["properties"]
        files = {}
        for key in properties.keys():
            if (
                properties[key]["type"] == "string"
                and properties[key]["format"] == "binary"
            ):
                temp_file = tempfile.NamedTemporaryFile(delete=False)
                temp_file.write(b"Temporary file content")
                temp_file.flush()
                temp_files.append(temp_file)
                files[key] = (temp_file.name, open(temp_file.name, "rb"))

    elif "application/json" in request_body:
        payload = {"example_key": "example_value"}

    return {
        "endpoint_path": endpoint_path,
        "method": method,
        "query_params": query_params,
        "headers": headers,
        "payload": payload,
        "files": files,
        "temp_files": temp_files,
    }


def create_and_send_request(
    method, endpoint_path, query_params, headers, payload=None, files=None
):
    try:
        if method == "get":
            return requests.get(endpoint_path, params=query_params, headers=headers)
        elif method == "post":
            if files:
                return requests.post(endpoint_path, files=files, headers=headers)
            else:
                return requests.post(endpoint_path, json=payload, headers=headers)
        elif method == "put":
            return requests.put(endpoint_path, json=payload, headers=headers)
        elif method == "delete":
            return requests.delete(endpoint_path, headers=headers)
        else:
            raise ValueError(f"Unsupported HTTP method: {method}")
    except Exception as e:
        print(f"Error occurred while sending request: {e}")
        return None
