from vulnerability_testers.request_sending import (
    create_and_send_request,
    create_request_data,
)


def endpoint_auth(server_url, request, endpoints_without_auth):
    blocked = True
    description = "endpoint accessible without authentication as expected"
    if request["path"] not in endpoints_without_auth:
        if check_endpoint_security_declaration(request):
            blocked = validate_secured_endpoint(server_url, request)
            description = (
                "endpoint secured as expected"
                if blocked
                else "access not denied. if this is not unexpected behavior consider adding it's path in the config file."
            )

    return {
        "testType": "validate_endpoint_auth",
        "passed": blocked,
        "endpoint": request["path"],
        "description": description,
    }


def check_endpoint_security_declaration(request):
    return request.get("security", None)


def validate_secured_endpoint(server_url, request):
    try:
        request_data = create_request_data(request, server_url)
        response = create_and_send_request(
            request_data["method"],
            request_data["endpoint_path"],
            request_data["query_params"],
            request_data["headers"],
            request_data["payload"],
            request_data["files"],
        )

        return str(response.status_code)[0] in ["4", "5"]
    except Exception:
        return False
