from htmlRequests import HtmlRequests
import yaml
import json
from vulnerability_testers import auth, connection_encryption
from pprint import pprint


class Pentester:
    def __init__(self, config):
        self.endpoints = []
        self.load_config(config)
        self.handle_api()
        self.extract_components()
        self.htmlRequests = HtmlRequests(
            self.servers[self.url_index]["url"],
            self.sec_schemes,
            self.stopOnFailure,
            self.status_code_validation,
            self.dos_request_count,
            self.max_acceptable_response_time,
            self.endpoints_without_auth,
        )

    def handle_api(self):
        self.extract_base_url()
        self.extract_headers()

    def extract_base_url(self):
        with open(self.api_spec_path, "r") as f:
            api_spec = yaml.safe_load(f)
            self.servers = api_spec.get("servers", [])

    def load_config(self, filepath):
        with open(filepath, "r") as f:
            config_file = json.load(f)
            self.stopOnFailure = config_file["stop_on_failure"]
            self.api_spec_path = config_file["api_spec_path"]
            self.url_index = config_file["url_index"]
            self.status_code_validation = config_file["status_code_validation"]
            self.dos_request_count = config_file["dos_request_count"]
            self.max_acceptable_response_time = config_file[
                "max_acceptable_response_time"
            ]
            self.endpoints_without_auth = config_file["endpoints_without_auth"]

    def resolve_reference(self, ref):
        ref_path = ref.lstrip("#/").split("/")
        resolved = self.api_spec
        for key in ref_path:
            resolved = resolved[key]
        return resolved

    def extract_components(self):
        with open(self.api_spec_path, "r") as f:
            api_spec = yaml.safe_load(f)
            components = api_spec.get("components", {})
            self.sec_schemes = components.get("securitySchemes", {})

    def extract_headers(self):
        with open(self.api_spec_path, "r") as f:
            api_spec = yaml.safe_load(f)
            paths = api_spec.get("paths", {})
            for path, operations in paths.items():
                # Check for global parameters at the path level
                global_parameters = paths[path].get("parameters", [])

                for method, details in operations.items():
                    if method.lower() not in ["get", "post", "put", "delete", "patch"]:
                        continue

                    # Merge global and operation-level parameters
                    parameters = global_parameters + details.get("parameters", [])

                    # Resolve $ref parameters
                    resolved_parameters = []
                    for param in parameters:
                        if "$ref" in param:
                            resolved_parameters.append(
                                self.resolve_reference(param["$ref"])
                            )
                        else:
                            resolved_parameters.append(param)
                    security = details.get("security")
                    # Extract headers from responses
                    responses = details.get("responses", {})
                    response_details = {}
                    for status_code, response in responses.items():
                        headers = response.get("headers", {}).keys()
                        content = response.get("content", {})
                        response_details[status_code] = {
                            "description": response.get("description", ""),
                            "headers": list(headers),
                            "content": {
                                ct: cs.get("schema", {}) for ct, cs in content.items()
                            },
                        }

                    request_body = details.get("requestBody")
                    request_body_content = {}
                    if request_body:
                        if "content" in request_body:
                            for content_type, content_schema in request_body[
                                "content"
                            ].items():
                                schema = content_schema.get("schema", {})
                                request_body_content[content_type] = schema

                    # Add endpoint details
                    self.endpoints.append(
                        {
                            "path": path,
                            "method": method.upper(),
                            "security": security,
                            "parameters": resolved_parameters,
                            "headers": headers,
                            "requestBody": request_body_content,
                            "responses": response_details,
                        }
                    )

    def run(self):
        outputs = []
        auth_result = auth(self.sec_schemes)
        outputs.append(auth_result)
        outputs.append(connection_encryption(self.servers[self.url_index]["url"]))
        for request in self.endpoints:
            outputs.append(self.htmlRequests.run(request, auth_result["passed"]))

        pprint(outputs)
        return outputs
