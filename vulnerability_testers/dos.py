from concurrent.futures import ThreadPoolExecutor
from vulnerability_testers.request_sending import (
    create_request_data,
    create_and_send_request,
)
from time import perf_counter


def dos(server_url, endpoint_data, request_count, max_acceptable_response_time):
    request_data = create_request_data(endpoint_data, server_url, False)
    outputs = []
    with ThreadPoolExecutor(max_workers=request_count) as executor:
        outputs.append(executor.submit(measure_response_time, request_data).result())

    max_response_time = max(outputs)
    success = max_response_time < max_acceptable_response_time
    return {
        "testType": "dos_attack_test",
        "passed": success,
        "endpoint": endpoint_data["path"],
        "description": f"dos attack test with {request_count} concurrent requests. max response time was {max_response_time}s.",
    }


def measure_response_time(request_data):
    start_time = perf_counter()
    create_and_send_request(
        request_data["method"],
        request_data["endpoint_path"],
        request_data["query_params"],
        request_data["headers"],
        request_data["payload"],
        request_data["files"],
    )
    return perf_counter() - start_time
